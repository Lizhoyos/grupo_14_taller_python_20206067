# -*- coding: utf-8 -*-
"""GRUPO_14_Tarea3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15wr36n4GuMDD6i5-Hn1RvKVPY6GUx6oc

**Tarea grupal 3**

1. Utilizando scipy. stats, crea un programa que modele la probabilidad de obtener un número específico de éxitos en una serie de lanzamientos de una moneda sin trucos (probabilidad de éxito p = 0. 5). Genera la probabilidad de obtener exactamente 7 caras en 10 lanzamientos.
"""

import scipy.stats as stats
import numpy as np
import matplotlib.pyplot as plt

"""* Probabilidad de obtener exactamente 7 caras en 10 lanzamientos"""

p = 0.5
n = 10
k = 7

prob_7 = stats.binom.pmf(k, n, p)

print(f'Probabilidad de obtener 7 caras: {prob_7}')

"""2. Calcula la probabilidad acumulada de obtener 7 o menos caras en 10 lanzamientos"""

prob_7_menos = stats.binom.cdf(k, n, p)

print(f'Probabilidad acumulada de obtener 7 o menos caras: {prob_7_menos}')

"""3. Grafica la distribución binomial completa para los 10 lanzamientos, mostrando la probabilidad de obtener desde 0 hasta 10 caras."""

x = np.arange(0, 11)
binom_dist = stats.binom.pmf(x, n, p)
plt.bar(x, binom_dist)
plt.xlabel('Número de caras')
plt.ylabel('Probabilidad')
plt.title('Distribución Binomial de 10 lanzamientos (p=0.5)')
plt.show()

"""4. Ahora la moneda tiene mayor probabilidad de caer en cara (probabilidad de éxito p =0. 8). ¿Cómo cambian los resultados? Vuelve a realizar los ejercicios I, II y III."""

from scipy.stats import binom

"""* Probabilidad de obtener exactamente 7 caras en 10 lanzamientos (con probabilidad 0.8)"""

n = 10
p = 0.8
k = 7

probabilidad = binom.pmf(k, n, p)

print(f'La probabilidad de obtener exactamente {k} caras en {n} lanzamientos es: {probabilidad:.6f}')

"""* Probabilidad acumulada de obtener 7 o menos caras en 10 lanzamientos (con probabilidad 0.8)"""

n = 10
p = 0.8
k = 7

probabilidad_acumulada = binom.cdf(k, n, p)

print(f'La probabilidad acumulada de obtener {k} o menos caras en {n} lanzamientos es: {probabilidad_acumulada:.6f}')

"""* Gráfica de la distribución binomial completa para los 10 lanzamientos, mostrando la probabilidad de obtener desde 0 hasta 10 caras"""

import matplotlib.pyplot as plt
from scipy.stats import binom
import numpy as np

n = 10
p = 0.8

x = np.arange(0, n+1)

probabilidades = binom.pmf(x, n, p)

plt.bar(x, probabilidades, color='skyblue')

plt.xlabel('Número de caras (éxitos)')
plt.ylabel('Probabilidad')
plt.title(f'Distribución Binomial: {n} lanzamientos, p = {p}')
plt.xticks(x)
plt.grid(True, axis='y', linestyle='--')

plt.show()

"""**Variación de resultados**

* Probabilidad de obtener exactamente 7 caras en 10 lanzamientos

p=0.5 --> 0.117187

p=0.8 --> 0.201327

La probabilidad de obtener exactamente 7 caras en 10 lanzamientos será mayor con p=0.8 a diferencia del caso en que p=0.5, pero parece no ser la más alta.

* Probabilidad acumulada de obtener 7 o menos caras en 10 lanzamientos (con probabilidad 0.8)

La probabilidad acumulada será mayor en p=0.5 en comparación del caso con p=0.8, dado que hay una mayor probabilidad de obtener más de 7 caras.

* Gráfica de la distribución binomial

Como se observa en el gráfico con p=0.8, este mostrará que las barras se desplazan hacia la derecha, dado que es más probable obtener un mayor número de caras en los 10 lanzamientos con el punto máximo de la distribución en 8 caras.

5. Utilizando scipy. stats, realiza un análisis de una distribución normal con una media de 0 y desviación estándar de 1. Genera un conjunto de datos aleatorios con 1000 muestras a partir de esta distribución.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

media = 0
desviacion_estandar = 1
n_muestras = 1000

# Datos aleatorios
datos = norm.rvs(loc=media, scale=desviacion_estandar, size=n_muestras)

print(f'Media de los datos generados: {np.mean(datos):.4f}')
print(f'Desviación estándar de los datos generados: {np.std(datos):.4f}')

# Histograma de los datos generados
plt.hist(datos, bins=30, density=True, alpha=0.6, color='skyblue')

# Función de densidad de probabilidad (PDF) de la distribución normal
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, media, desviacion_estandar)
plt.plot(x, p, 'k', linewidth=2)

plt.title('Histograma de datos aleatorios y PDF de la distribución normal')
plt.xlabel('Valor')
plt.ylabel('Densidad de probabilidad')

plt.show()

"""6. Calcula y muestra la media, la desviación estándar y la mediana de los datos
generados.
"""

import numpy as np
from scipy.stats import norm

media = 0
desviacion_estandar = 1
n_muestras = 1000

datos = norm.rvs(loc=media, scale=desviacion_estandar, size=n_muestras)

# Estadísticas
media_datos = np.mean(datos)
desviacion_estandar_datos = np.std(datos)
mediana_datos = np.median(datos)

print(f'Media de los datos generados: {media_datos:.7f}')
print(f'Desviación estándar de los datos generados: {desviacion_estandar_datos:.7f}')
print(f'Mediana de los datos generados: {mediana_datos:.7f}')

"""7. Grafica el histograma de los datos y superpón la curva de la distribución normal teórica"""

datos = norm.rvs(loc=media, scale=desviacion_estandar, size=n_muestras)

# Histograma de los datos generados
plt.hist(datos, bins=30, density=True, alpha=0.6, color='skyblue')

# Función de densidad de probabilidad de la distribución normal
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, media, desviacion_estandar)
plt.plot(x, p, 'k', linewidth=2)

plt.title('Histograma de datos aleatorios y PDF de la distribución normal')
plt.xlabel('Valor')
plt.ylabel('Densidad de probabilidad')

plt.show()

"""8. Calcula la probabilidad de que un valor caiga dentro del rango de -1 a 1 (una desviación estándar de la media)"""

# Calcular la probabilidad de que un valor caiga dentro del rango de -1 a 1
probabilidad = norm.cdf(1, loc=media_datos, scale=desviacion_estandar_datos) - norm.cdf(-1, loc=media_datos, scale=desviacion_estandar_datos)

print(f'Probabilidad de que un valor caiga entre -1 y 1: {probabilidad:.4f}')