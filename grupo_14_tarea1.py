# -*- coding: utf-8 -*-
"""GRUPO_14_Tarea1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ebW0DP1PcGOqQccBma-ahyaFk5Xfx-bm

**Tarea grupal 1**

1.
Utilizando un “if else” cree una estructura que evalúe “x” tal que:

Si x es múltiplo de 2 imprima “Es múltiplo de 2”.

Si x es múltiplo de 3 imprima “Es múltiplo de 3”

Si x es múltiplo de 2 y 3 imprima “Es múltiplo de 2 y 3”

Para otro caso, imprime “Otro caso”

Muestra un ejemplo con x = 6.
"""

x = 6

if x % 2 == 0 and x % 3 == 0:
  print("Es múltiplo de 2 y 3")
elif x % 2 == 0:
  print("Es múltiplo de 2")
elif x % 3 == 0:
  print("Es múltiplo de 3")
else:
  print("Otro caso")

"""2. Utilizando un “for loop” y el condicional “if else” para un rango del 1 al 100, evalúe “x”
tal que:

Si x es múltiplo de 3 imprima “Fizz”

Si x es múltiplo de 5 imprima “Buzz”

Si x es múltiplo de 3 y 5 imprima “FizzBuzz”

Para el resto de los casos, solo imprima el número.
"""

for x in range(1, 101):
  if x % 3 == 0 and x % 5 == 0:
    print("FizzBuzz")
  elif x % 3 == 0:
    print("Fizz")
  elif x % 5 == 0:
    print("Buzz")
  else:
    print(x)

"""3. Crea una función 𝒄𝒂𝒍𝒄𝒖𝒍𝒂𝒓_𝒅𝒆𝒔𝒄𝒖𝒆𝒏𝒕𝒐() que permita calcular el descuento aplicado a un
producto. Si el total es mayor o igual a 1000, aplica un 20% de descuento, si el total es mayor
o igual a 500 pero menor a 1000, aplica un 10% de descuento. Si el total es menor a 500, no
aplica ningún descuento. La función debe devolver el total final después de aplicar el descuento. Prueba la función con un total de compra de 1200, 750 y 300.
"""

def calcular_descuento(total):
    if total >= 1000:
        descuento = total * 0.20
    elif total >= 500:
        descuento = total * 0.10
    else:
        descuento = 0
    total_final = total - descuento
    return total_final
    # Pruebas
total1 = 1200
total2 = 750
total3 = 300
print(f"Total después del descuento para 1200: {calcular_descuento(total1)}")
print(f"Total después del descuento para 750: {calcular_descuento(total2)}")
print(f"Total después del descuento para 300: {calcular_descuento(total3)}")

"""4. Crea una función llamada 𝒄𝒍𝒂𝒔𝒊𝒇𝒊𝒄𝒂𝒓_𝒆𝒅𝒂𝒅() que reciba como parámetro la edad de una
persona. La función debe clasificar a la persona en una de las siguientes categorías:

"Niño" si la edad es menor de 12 años.

"Adolescente" si la edad está entre 12 y 17 años.

“Joven” si la edad está entre 18 y 24 años.

"Adulto" si la edad está entre 25 y 64 años.

"Adulto Mayor" si la edad es mayor o igual a 65 años.

La función debe devolver la categoría correspondiente. Prueba la función con las  edades de
10, 19, 25 y 70.
"""

# Definir la función clasificar_edad
def clasificar_edad(edad):
    if edad < 12:
        return "Niño"
    elif 12 <= edad <= 17:
        return "Adolescente"
    elif 18 <= edad <= 24:
        return "Joven"
    elif 25 <= edad <= 64:
        return "Adulto"
    elif edad >= 65:
        return "Adulto Mayor"

"""Si probamos con la lista que nos pidieron"""

edades = [10, 19, 25, 70]
for edad in edades:
    print(f"La persona de {edad} años es: {clasificar_edad(edad)}")

"""5. Sea la fórmula del CRAEST PUCP

CRAEST = ((𝑴𝒆𝒅𝒊𝒂 𝒑𝒆𝒓𝒔𝒐𝒏𝒂𝒍 – 𝒎𝒆𝒅𝒊𝒂 𝒅𝒆𝒍 𝒄𝒖𝒓𝒔𝒐)∗ 𝟏𝟎)/𝑫𝒆𝒔𝒗𝒊𝒂𝒄𝒊ó𝒏 𝒆𝒔𝒕á𝒏𝒅𝒂𝒓 𝒅𝒆𝒍 𝒄𝒖𝒓𝒔𝒐 + 𝟓𝟎

Crea una función 𝒄𝒂𝒍𝒄𝒖𝒍𝒂𝒓_𝒄𝒓𝒂𝒆𝒔𝒕(𝒎𝒆𝒅𝒊𝒂_𝒑𝒆𝒓𝒔𝒐𝒏𝒂𝒍,𝒎𝒆𝒅𝒊𝒂_𝒄𝒖𝒓𝒔𝒐,𝒅𝒆𝒔𝒗𝒊𝒂𝒄𝒊𝒐𝒏_𝒄𝒖𝒓𝒔𝒐) que
reciba como tres únicos inputs tu media, la media del curso y la desviación estándar del curso
y te devuelva tu craest calculado. No te olvides documentar la función usando triple comillas
“””.
Prueba la función los datos de algún curso que hayas llevado.
"""

# Definimos la funcion calcular_craest
def calcular_craest(media_personal, media_curso, desviacion_curso):
    """
    Objetivo:
      -Calcular el CRAEST según la media personal, media del curso y desviación estandar del curso

    Input:
      -media_personal: Media personal de un estudiante
      -media_curso: Media del curso
      -desviacion_curso: Desviación estándar del curso

    Output
      -CRAEST calculado.
    """
    craest = ((media_personal - media_curso) * 10) / desviacion_curso + 50
    return craest

"""Probamos con los datos de algún curso:"""

calcular_craest(17,10.9,4.6)